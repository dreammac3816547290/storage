{"version":3,"file":"index.js","names":[],"sources":["../src/index.ts"],"sourcesContent":["type ValueStringUnion = \"boolean\" | \"number\" | \"string\";\r\n\r\ntype ColumnInput<\r\n  Name extends string,\r\n  ValueString extends ValueStringUnion,\r\n  Nullable extends boolean\r\n> = {\r\n  name: Name;\r\n  type: ValueString;\r\n  nullable: Nullable;\r\n};\r\n\r\ntype ColumnOutput<\r\n  Name extends string,\r\n  ValueString extends ValueStringUnion,\r\n  Nullable extends boolean\r\n> = ColumnInput<Name, ValueString, Nullable>;\r\n\r\ntype ColumnOutputUnion = ColumnOutput<string, ValueStringUnion, boolean>;\r\n\r\ntype ColumnName<C> = C extends ColumnOutput<infer Name, any, any>\r\n  ? Name\r\n  : never;\r\n\r\ntype TransformColumns<ColumnOutputs> =\r\n  ColumnOutputs extends readonly ColumnOutputUnion[]\r\n    ? {\r\n        [C in ColumnOutputs[number] as ColumnName<C>]: C;\r\n      }\r\n    : never;\r\n\r\nexport function Column<\r\n  Name extends string,\r\n  ValueString extends ValueStringUnion,\r\n  Nullable extends boolean\r\n>(\r\n  input: ColumnInput<Name, ValueString, Nullable>\r\n): ColumnOutput<Name, ValueString, Nullable> {\r\n  return input;\r\n}\r\n\r\ntype TableInput<Name extends string, ColumnOutputs> = {\r\n  name: Name;\r\n  columns: ColumnOutputs;\r\n};\r\n\r\ntype TableOutput<\r\n  Name extends string,\r\n  ColumnOutputs,\r\n  TransformColumnsOutput extends TransformColumns<ColumnOutputs>\r\n> = {\r\n  name: Name;\r\n  columns: TransformColumnsOutput;\r\n};\r\n\r\ntype TableOutputUnion = TableOutput<string, any, any>;\r\n\r\ntype TableName<T> = T extends TableOutput<infer Name, any, any> ? Name : never;\r\n\r\ntype TransformTables<TableOutputs> =\r\n  TableOutputs extends readonly TableOutputUnion[]\r\n    ? {\r\n        [T in TableOutputs[number] as TableName<T>]: T;\r\n      }\r\n    : never;\r\n\r\nexport function Table<\r\n  Name extends string,\r\n  ColumnOutputs,\r\n  TransformColumnsOutput extends TransformColumns<ColumnOutputs>\r\n>({\r\n  name,\r\n  columns,\r\n}: TableInput<Name, ColumnOutputs>): TableOutput<\r\n  Name,\r\n  ColumnOutputs,\r\n  TransformColumnsOutput\r\n> {\r\n  if (!Array.isArray(columns)) throw new Error(\"table creation error\");\r\n  return {\r\n    name,\r\n    columns: Object.fromEntries(columns.map((column) => [column.name, column])),\r\n  };\r\n}\r\n\r\ntype SchemaInput<TableOutputs> = { tables: TableOutputs };\r\n\r\ntype SchemaOutput<\r\n  TableOutputs,\r\n  TransformTablesOutput extends TransformTables<TableOutputs>\r\n> = {\r\n  tables: TransformTablesOutput;\r\n};\r\n\r\nexport function Schema<\r\n  TableOutputs,\r\n  TransformTablesOutput extends TransformTables<TableOutputs>\r\n>({\r\n  tables,\r\n}: SchemaInput<TableOutputs>): SchemaOutput<\r\n  TableOutputs,\r\n  TransformTablesOutput\r\n> {\r\n  if (!Array.isArray(tables)) throw new Error(\"schema creation error\");\r\n  return {\r\n    tables: Object.fromEntries(tables.map((table) => [table.name, table])),\r\n  };\r\n}\r\n\r\nconst schema = Schema({\r\n  tables: [\r\n    Table({\r\n      name: \"product\",\r\n      columns: [\r\n        Column({ name: \"id\", type: \"number\", nullable: false }),\r\n        Column({ name: \"name\", type: \"string\", nullable: false }),\r\n        Column({ name: \"price\", type: \"number\", nullable: false }),\r\n      ] as const,\r\n    }),\r\n    Table({\r\n      name: \"order\",\r\n      columns: [\r\n        Column({ name: \"id\", type: \"number\", nullable: false }),\r\n        // Column({\r\n        //   name: \"product_id\",\r\n        //   type: \"reference\",\r\n        //   data: Reference({ table: \"product\", column: \"id\" }),\r\n        // }),\r\n        Column({ name: \"quantity\", type: \"number\", nullable: false }),\r\n      ] as const,\r\n    }),\r\n  ] as const,\r\n});\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////\r\n"],"mappings":";AA+BA,SAAgB,OAKd,OAC2C;AAC3C,QAAO;;AA4BT,SAAgB,MAId,EACA,MACA,WAKA;AACA,KAAI,CAAC,MAAM,QAAQ,QAAQ,CAAE,OAAM,IAAI,MAAM,uBAAuB;AACpE,QAAO;EACL;EACA,SAAS,OAAO,YAAY,QAAQ,KAAK,WAAW,CAAC,OAAO,MAAM,OAAO,CAAC,CAAC;EAC5E;;AAYH,SAAgB,OAGd,EACA,UAIA;AACA,KAAI,CAAC,MAAM,QAAQ,OAAO,CAAE,OAAM,IAAI,MAAM,wBAAwB;AACpE,QAAO,EACL,QAAQ,OAAO,YAAY,OAAO,KAAK,UAAU,CAAC,MAAM,MAAM,MAAM,CAAC,CAAC,EACvE;;AAGY,OAAO,EACpB,QAAQ,CACN,MAAM;CACJ,MAAM;CACN,SAAS;EACP,OAAO;GAAE,MAAM;GAAM,MAAM;GAAU,UAAU;GAAO,CAAC;EACvD,OAAO;GAAE,MAAM;GAAQ,MAAM;GAAU,UAAU;GAAO,CAAC;EACzD,OAAO;GAAE,MAAM;GAAS,MAAM;GAAU,UAAU;GAAO,CAAC;EAC3D;CACF,CAAC,EACF,MAAM;CACJ,MAAM;CACN,SAAS,CACP,OAAO;EAAE,MAAM;EAAM,MAAM;EAAU,UAAU;EAAO,CAAC,EAMvD,OAAO;EAAE,MAAM;EAAY,MAAM;EAAU,UAAU;EAAO,CAAC,CAC9D;CACF,CAAC,CACH,EACF,CAAC"}